<%= javascript_include_tag "Chart.min" %>

<div id="install-stats-chart-container"></div>

<% sources = ['stylish-fx', 'stylish-ch', 'stylish-op', 'stylish-sf', 'stylish-do', 'userjs', 'css-opera'] %>
<table>
	<thead>
		<tr>
			<th>Date</th>
			<th>Stylish (<abbr title="Firefox">FX</abbr>)</th>
			<th>Stylish (<abbr title="Chrome">CH</abbr>)</th>
			<th>Stylish (<abbr title="Opera">OP</abbr>)</th>
			<th>Stylish (<abbr title="Safari">SF</abbr>)</th>
			<th>Stylish (<abbr title="Dolphin">DO</abbr>)</th>
			<th>User JS</th>
			<th>Opera CSS</th>
			<th>Total</th>
		</tr>
	</thead>
	<tbody>
		<% current_date = @style.created.to_date
		table_start_date = params['all-stats'].nil? ? [current_date,108.days.ago].max : current_date%>
		<% if current_date != table_start_date %>
			<tr>
				<td colspan="<%=sources.length + 2%>">
					<a href="?all-stats=1" rel="nofollow">Include older data in table</a>
				</td>
			</tr>
		<% end
		end_date = 8.days.ago.to_date
		source_totals = {}
		day_totals = {}
		sources.each do |s|
			source_totals[s] = 0
		end
		source_totals['total'] = 0
		until current_date > end_date
			c = @counts[current_date]
			render_date = table_start_date <= current_date
			if render_date %>
				<tr>
					<th><%=h current_date.strftime('%F')%></th>
			<% end
			day_total = 0
			sources.each do |s|
				day_source_count = (c.nil? or c[s].nil?) ? 0 : c[s]
				source_totals[s] += day_source_count
				day_total += day_source_count
				if render_date %>
					<td class="numeric-value"><%=number_with_delimiter(day_source_count)%></td>
				<% end
			end
			if render_date %>
				<td class="numeric-value"><%=number_with_delimiter(day_total)%></td>
				</tr>
			<% end
			day_totals[current_date] = day_total
			source_totals['total'] += day_total
			current_date = current_date + 1.day
		end %>
	</tbody>
	<tfoot>
		<tr>
			<th>Total</th>
			<% sources.each do |s| %>
				<td class="numeric-value"><%=number_with_delimiter(source_totals[s])%></td>
			<% end %>
			<td class="numeric-value"><%=number_with_delimiter(source_totals['total'])%></td>
		</tr>
	</tfoot>
</table>

<%
max_labels = 30
label_skip = max_labels > day_totals.keys.length ? 1 : (day_totals.keys.length / 30)

max_installs = day_totals.values.max
if !max_installs.nil? and max_installs > 0
	x = Math.log10(max_installs).floor
	scale_top=(max_installs/(10.0**x)).ceil*10**x
	scale_steps = [10,max_installs].min
	scale_step_width = scale_top / scale_steps
else
	scale_top = 1
	scale_steps = 1
	scale_step_width = 1
end

%>
<script>
var data = {
	labels: [<%=day_totals.keys.each_with_index.map{ |d, i| 
			'"' + ((i % label_skip == 0) ? escape_javascript(d.to_s): '') + '"'
		}.join(',').html_safe%>
	],
	datasets: [{
			fillColor : "rgba(220,220,220,0.5)",
			strokeColor : "rgba(220,220,220,1)",
			data: [<%=day_totals.values.join(',')%>]
	}]
}

var container = document.getElementById("install-stats-chart-container");
var canvas = document.createElement("canvas")
canvas.id = "install-stats-chart";
canvas.width = getComputedStyle(container).width.replace("px", "");
canvas.height = 400;
container.appendChild(canvas)

var ctx = canvas.getContext("2d");
var myNewChart = new Chart(ctx).Bar(data, {animation: false, scaleShowGridLines: false, barValueSpacing: 0, scaleOverride: true, scaleStartValue: 0, scaleSteps: <%=scale_steps%>, scaleStepWidth: <%=scale_step_width%>});
</script>
