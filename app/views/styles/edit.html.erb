<% content_for :header_includes do %>
	<%= javascript_include_tag "edit.js" %>
	<%= stylesheet_link_tag 'edit.css' %>
	<%= javascript_include_tag "jscolor.js" %>
<% end %>

<ul>
	<li>Read <a href="/help/coding">tips on making user styles</a>.</li>
	<li>To specify which URLs will have the style applied, use <a href="https://github.com/JasonBarnabe/stylish/wiki/Applying-styles-to-specific-sites">the Mozilla @-moz-document format</a>. If you're using Chrome, you can use the "To Mozilla Format" button to generate the code.</li>
	<li>Styles for sites with adult content are not allowed.</li>
	<li>Styles adding adult content to sites are not allowed.</li>
	<li>Do not post other people's content without their permission.</li>
	<li>If you decide to stop maintaining your style, please <%=link_to "delete it", :action => "delete", :id => @style.id%> rather than blanking it out. By deleting, you can make it so your style doesn't come up in searches while still being accessible via direct access for your current users.</li>
</ul>

<% if @style.new_record?
	#this doesn't work on the new host...
	#form_url = styles_path()
	#form_url = url_for(:action => "create")
	form_url = "/styles/create"
	form_method = :post
else
	#form_url = style_path(@style)
	form_url = "/styles/update"
	form_method = :put
end %>
<%=form_for(:style, :url => form_url, :html => { :method => form_method, :multipart => true}) do |s| %>

	<%= s.error_messages %>

	<div class="form-controls">
		<label for="short-description">Name</label><br>
		<%=s.text_field(:short_description, :maxlength => 50, :required => true)%>
	</div>

	<div class="form-controls">
		<label for="long-description">Description</label> - <span class="linking-note">A brief (3-4 sentences) description of the style. <a href="/help/coding#format" tabindex="-1">Some HTML allowed.</a></span>
		<%=s.text_area(:long_description, :rows => 4, :required => true)%>
	</div>


	<div class="form-controls">
		<label for="additional-info">Additional Info (Optional)</label> - <span class="linking-note">Release notes, versioning info, change log, instructions, credits, etc. <a href="/help/coding#format" tabindex="-1">Some HTML allowed.</a></span>
		<%=s.text_area(:additional_info, :rows => 8)%>
	</div>

	<div class="form-controls">
		<label for="css">CSS</label> <span class="linking-note" style="display: none"><input type="checkbox" id="enable-source-editor-code" name="enable-source-editor-code" <%if params['enable-source-editor-code']%>checked<%end%> class="enable-source-editor" data-related-editor="css"><label for="enable-source-editor-code" class="checkbox-label">Enable source editor</label></span><br>
		<% if !@style.style_code.nil? && !@style.style_code.id.nil? %>
			<input type="hidden" name="style[style_code_attributes][id]" value="<%=@style.style_code.id%>">
		<% end %>
		<textarea id="css" name="style[style_code_attributes][code]" required><%=@style.style_code.nil? ? "" : @style.style_code.code%></textarea>
	</div>

	<div class="form-controls">
		<label for="example-url">Example URL (Optional)</label> <span class="linking-note">Provide a URL that is affected by this style</span><br>
		<input id="example-url" type="url" maxlength="500" size="50" name="style[screenshot_url_override]" value="<%=!params['style'].nil? && !params['style']['screenshot_url_override'].nil? ? h(params['style']['screenshot_url_override']) : h(@style.screenshot_url_override)%>">
	</div>

	<div class="form-controls">
		<label>Style Settings (Optional)</label> <span class="linking-note"><a href="/help/coding#help-style-settings">Need help with style settings?</a></span>
		<ul id="edit-style-settings">
			<li id="new-setting"><input type="button" onclick="addOptionnedSettingAndOptions('dropdown', '', '');return false" value="New Drop-Down Setting"> <input type="button" onclick="return addOptionlessSetting('color', '', '', null);" value="New Color Setting"> <input type="button" onclick="addOptionlessSetting('text', '', '', null);return false" value="New Text Setting"> <input type="button" onclick="addOptionnedSetting('image', '', '');return false" value="New Image Setting"></li>
		</ul>
		<script>
			var settings = document.getElementById("edit-style-settings")
			var newSetting = document.getElementById("new-setting");

			function html(h) {
				var d = document.createElement("div");
				d.innerHTML = h;
				var f = document.createDocumentFragment();
				Array.prototype.forEach.call(d.childNodes, function(c) { f.appendChild(c); });
				return f;
			}

			function addOptionnedSetting(type, label, installKey, savedId) {
				if (!savedId) {
					savedId = '';
				}
				var code = '' +
					'<li class="edit-settingType-setting">' +
						'<div class="edit-setting">' +
							'<div class="edit-setting-buttons">' +
								'<input class="move-setting-up" type="button" onclick="moveSetting(event, true);return false;" value="↑"> ' +
								'<input class="move-setting-down" type="button" onclick="moveSetting(event, false);return false;" value="↓"> ' +
								'<input type="button" onclick="return removeSetting(event);" value="✖">' +
							'</div>' +
							'<input name="style[style_settings_attributes][settingIndex][label]" placeholder="Label" title="Label displayed to the user" required maxlength="100" value="passedLabel"> ' +
							'<input name="style[style_settings_attributes][settingIndex][install_key]" placeholder="Install Key" title="Install key - matches the placeholder comment in your code" required maxlength="20" value="passedInstallKey">' +
							'<input type="hidden" name="style[style_settings_attributes][settingIndex][setting_type]" value="settingType">' +
							'<input type="hidden" name="style[style_settings_attributes][settingIndex][id]" value="savedId">' +
						'</div>' +
						'<ul id="edit-style-options-settingIndex" class="edit-style-options">' +
							'<li class="new-option">' +
								'<input type="button" onclick="return addTextOptionEvent(event, \'settingType\', settingIndex, \'\', \'\', \'\', false)" value="Add Option">' +
							'</li>' +
						'</ul>' +
					'</li>';
				var nextIndex = getNextSettingIndex();
				code = code.replace(/settingIndex/g, nextIndex)
					.replace(/settingType/g, escapeForReplace(type))
					.replace(/savedId/g, escapeForReplace(savedId))
					.replace(/passedLabel/g, escapeForReplace(label))
					.replace(/passedInstallKey/g, escapeForReplace(installKey));
				settings.insertBefore(html(code), newSetting);
				updateSettingButtons();
				return nextIndex;
			}

			// Add a setting with two options
			function addOptionnedSettingAndOptions(type, label, installKey, savedId) {
				var index = addOptionnedSetting(type, label, installKey, savedId);
				var optionsContainer = document.getElementById("edit-style-options-" + index);;
				addTextOption(optionsContainer, type, index, '', '', '', false);
				addTextOption(optionsContainer, type, index, '', '', '', false);
			}

			function addOptionlessSetting(type, label, installKey, defaultValue, savedSettingId, savedOptionId) {
				if (!savedSettingId) {
					savedSettingId = '';
				}
				if (!savedOptionId) {
					savedOptionId = '';
				}
				var code = '' +
					'<li class="edit-settingType-setting">' +
						'<input name="style[style_settings_attributes][settingIndex][label]" placeholder="Label" title="Label displayed to the user" required maxlength="100" value="passedLabel"> ' +
						'<input name="style[style_settings_attributes][settingIndex][install_key]" placeholder="Install Key" title="Install key - matches the placeholder comment in your code"required maxlength="20" value="passedInstallKey">' +
						'<input type="hidden" name="style[style_settings_attributes][settingIndex][setting_type]" value="settingType"> ' +
						'<label for="option-default-settingIndex">Default</label> ' +
						'<input type="hidden" name="style[style_settings_attributes][settingIndex][id]" value="savedSettingId">' +
						'<input type="hidden" name="style[style_settings_attributes][settingIndex][style_setting_options_attributes][0][id]" value="savedOptionId">';
				if (type == "color") {
					code += '<input type="text" class="color {hash:true,required:false}" id="option-default-settingIndex" name="style[style_settings_attributes][settingIndex][style_setting_options_attributes][0][value]" value="" size="7" maxlength="7">';
				} else {
					code += '<input type="text" id="option-default-settingIndex" name="style[style_settings_attributes][settingIndex][style_setting_options_attributes][0][value]" value="" size="20">';
				}
				code += '' +
					'<div class="edit-setting-buttons">' +
						'<input class="move-setting-up" type="button" onclick="moveSetting(event, true);return false;" value="↑"> ' +
						'<input class="move-setting-down" type="button" onclick="moveSetting(event, false);return false;" value="↓"> ' +
						'<input type="button" onclick="return removeSetting(event);" value="✖">' +
					'</div></li>';
				var nextIndex = getNextSettingIndex();
				code = code.replace(/settingIndex/g, nextIndex)
					.replace(/settingType/g, escapeForReplace(type))
					.replace(/savedSettingId/g, escapeForReplace(savedSettingId))
					.replace(/savedOptionId/g, escapeForReplace(savedOptionId))
					.replace(/passedLabel/g, escapeForReplace(label))
					.replace(/passedInstallKey/g, escapeForReplace(installKey));
				settings.insertBefore(html(code), newSetting);
				var defaultField = document.getElementById("option-default-" + nextIndex);
				if (type == "color") {
					new jscolor.color(defaultField, {hash:true,required:true});
				}
				if (defaultValue) {
					defaultField.value = defaultValue;
				}
				updateSettingButtons();
			}

			function addTextOptionEvent(e, type, fakeId, label, installKey, value, isDefault, savedId) {
				addTextOption(getParent(e.target, "ul"), type, fakeId, label, installKey, value, isDefault, savedId);
			}

			function addTextOption(ul, type, nextIndex, label, installKey, value, isDefault, savedId) {
				if (!savedId) {
					savedId = '';
				}
				// Determine the next available index
				var indexWithinSetting = 0;
				var previousOptions = document.querySelectorAll("[name^='style[style_settings_attributes][" + nextIndex + "][style_setting_options_attributes]']");
				if (previousOptions.length > 0) {
					indexWithinSetting = parseInt(previousOptions[previousOptions.length-1].getAttribute("name").match(/style_setting_options_attributes\]\[([0-9]+)\]/)[1]) + 1;
				}

				var code = '' +
					'<li>' +
						'<div class="edit-option">' +
							'<div class="edit-option-buttons">' +
								'<input class="move-option-up" type="button" onclick="moveOption(event, true);return false;" value="↑"> ' +
								'<input class="move-option-down" type="button" onclick="moveOption(event, false);return false;" value="↓"> ' +
								'<input class="remove-option" type="button" onclick="removeTextOption(event);return false;" value="✖">' +
							'</div>' +
							'<input name="style[style_settings_attributes][optionIndex][style_setting_options_attributes][indexWithinSetting][label]" required maxlength="100" placeholder="Label" title="Label displayed to the user" value="passedLabel">' +
							'<input name="style[style_settings_attributes][optionIndex][style_setting_options_attributes][indexWithinSetting][install_key]" required maxlength="20" placeholder="Install Key" title="Install key - used to keep track of selections when the user updates" value="passedInstallKey">' +
							'<input type="radio" name="style[style_settings_attributes][optionIndex][default]" value="indexWithinSetting"' + (isDefault ? 'checked' : '') + '> Default' +
							'<input type="hidden" name="style[style_settings_attributes][optionIndex][style_setting_options_attributes][indexWithinSetting][id]" value="savedId">' +
						'</div>';
				switch (type) {
					case 'dropdown':
						code += '<textarea name="style[style_settings_attributes][optionIndex][style_setting_options_attributes][indexWithinSetting][value]" rows="5" placeholder="Code" title="Code inserted into your CSS">passedValue</textarea>';
						break;
					case 'image':
						code += '<input class="edit-option-value-url" name="style[style_settings_attributes][optionIndex][style_setting_options_attributes][indexWithinSetting][value]" type="url" placeholder="URL" title="URL inserted into your CSS" value="passedValue">';
						break;
				}
				code += '</li>'
				code = code.replace(/optionIndex/g, nextIndex)
					.replace(/passedLabel/g, escapeForReplace(label))
					.replace(/passedValue/g, escapeForReplace(value))
					.replace(/passedInstallKey/g, escapeForReplace(installKey))
					.replace(/indexWithinSetting/g, escapeForReplace(indexWithinSetting))
					.replace(/savedId/g, escapeForReplace(savedId));
				ul.insertBefore(html(code), ul.lastChild);
				ensureDefault(ul);
				updateOptionButtons(ul);
			}

			function removeSetting(event) {
				var li = getParent(event.target, "li");
				removeEntry(li);
				updateSettingButtons();
			}

			function removeTextOption(event) {
				var li = getParent(event.target, "li");
				var p = li.parentNode;
				removeEntry(li);
				ensureDefault(p);
				updateOptionButtons(p);
			}

			function ensureDefault(li) {
				var currentDefault = li.querySelector("input[type='radio']:checked");
				if (currentDefault != null) {
					return;
				}
				var firstOption = li.querySelector("input[type='radio']");
				if (firstOption == null) {
					return;
				}
				firstOption.checked = true;
			}

			function removeEntry(li) {
				li.parentNode.removeChild(li);
				return false;
			}

			function updateSettingButtons() {
				var downs = settings.querySelectorAll(".move-setting-down");
				if (downs.length == 1) {
					downs[0].style.visibility = "hidden";
				} else if (downs.length > 1) {
					for (var i = 0; i < downs.length - 1; i++) {
						downs[i].style.visibility = "";
					}
					downs[downs.length - 1].style.visibility = "hidden";
				}
				var ups = settings.querySelectorAll(".move-setting-up");
				if (ups.length == 1) {
					ups[0].style.visibility = "hidden";
				} else if (ups.length > 1) {
					ups[0].style.visibility = "hidden";
					for (var i = 1; i < ups.length; i++) {
						ups[i].style.visibility = "";
					}
				}
			}

			function updateOptionButtons(e) {
				var allowLessThanTwoSettings = e.parentNode.className == "edit-image-setting";
				var downs = e.querySelectorAll(".move-option-down");
				if (downs.length == 1) {
					downs[0].style.visibility = "hidden";
				} else if (downs.length > 1) {
					for (var i = 0; i < downs.length - 1; i++) {
						downs[i].style.visibility = "";
					}
					downs[downs.length - 1].style.visibility = "hidden";
				}
				var ups = e.querySelectorAll(".move-option-up");
				if (ups.length == 1) {
					ups[0].style.visibility = "hidden";
				} else if (ups.length > 1) {
					ups[0].style.visibility = "hidden";
					for (var i = 1; i < ups.length; i++) {
						ups[i].style.visibility = "";
					}
				}
				var removes = e.querySelectorAll(".remove-option");
				for (var i = 0; i < removes.length; i++) {
					removes[i].style.visibility = (removes.length > 2 || allowLessThanTwoSettings) ? "" : "hidden";
				}
			}

			function getNextSettingIndex() {
				var existingElements = document.querySelectorAll("input[name^='style[style_settings_attributes]'][name$='[label]']");
				var biggestIndex = -1;
				for (var i = 0; i < existingElements.length; i++) {
					var number = new Number(existingElements[i].name.split("][")[1]);
					if (number > biggestIndex) {
						biggestIndex = number;
					}
				}
				return biggestIndex + 1;
			}

			function getParent(element, nodeName) {
				element = element.parentNode;
				while (element != null) {
					if (element.nodeName.toLowerCase() == nodeName) {
						return element;
					}
					element = element.parentNode;
				}
				return null;
			}

			function getSibling(element, nodeName, previous) {
				if (previous) {
					element = element.previousSibling;
				} else {
					element = element.nextSibling;
				}
				while (element != null) {
					if (element.nodeName.toLowerCase() == nodeName) {
						return element;
					}
					if (previous) {
						element = element.previousSibling;
					} else {
						element = element.nextSibling;
					}
				}
				return null;
			}

			function moveSetting(e, up) {
				var row = getParent(e.target, "li");
				var switchRow = getSibling(row, "li", up);
				if (switchRow == null) {
					return false;
				}
				if (up) {
					row.parentNode.insertBefore(row, switchRow);
				} else {
					row.parentNode.insertBefore(switchRow, row);
				}
				updateSettingButtons();
				return false;
			}

			function moveOption(e, up) {
				var row = getParent(e.target, "li");
				var switchRow = getSibling(row, "li", up);
				if (up) {
					row.parentNode.insertBefore(row, switchRow);
				} else {
					row.parentNode.insertBefore(switchRow, row);
				}				
				updateOptionButtons(row.parentNode);
			}

			function switchIdentifiers(row, from, to) {
				var inputs = row.getElementsByTagName("input");
				for (var i = 0; i < inputs.length; i++) {
					inputs[i].name = inputs[i].name.replace(from, to);
				}
				var textareas = row.getElementsByTagName("textarea");
				for (var i = 0; i < textareas.length; i++) {
					textareas[i].name = textareas[i].name.replace(from, to);
				}
			}

			// with String.replace, $ is a special character, escape it to $$
			function escapeForReplace(s) {
				return ("" + s).replace(/\$/g, '$$$$');
			}

			var lastId = null;
			<% @style.live_style_settings.each do |setting|
				if !setting.has_only_default_option? %>
					lastId = addOptionnedSetting('<%=setting.setting_type%>', '<%=escape_javascript(setting.label)%>', '<%=escape_javascript(setting.install_key)%>', '<%=escape_javascript(setting.id.to_s)%>');
					<% setting.live_style_setting_options.each do |sov| %>
						addTextOption(document.getElementById('edit-style-options-' + lastId), '<%=setting.setting_type%>', lastId, '<%=escape_javascript(sov.label)%>', '<%=escape_javascript(sov.install_key)%>', '<%=escape_javascript(sov.value)%>', <%=sov.default%>, '<%=escape_javascript(sov.id.to_s)%>');
					<% end
				else
					only_option = setting.live_style_setting_options.first
					defaultValue = only_option.value unless only_option.nil? %>
					lastId = addOptionlessSetting('<%=setting.setting_type%>', '<%=escape_javascript(setting.label)%>', '<%=escape_javascript(setting.install_key)%>', '<%=escape_javascript(defaultValue)%>', '<%=escape_javascript(setting.id.to_s)%>', '<%=only_option.nil? ? '' : escape_javascript(only_option.id.to_s)%>');
				<% end
			end %>
		</script>
	</div>

	<div class="form-controls">
		<label>Primary Screenshot</label> <span class="linking-note">This screenshot will be displayed on your style page and in search results. It should clearly represent what the site or app looks like with your style applied. <a href="/help/coding#screenshots-doc">More info on screenshots.</a></span><br>
		<input name="style[screenshot_type_preference]" type="radio" value="auto" <%=@style.screenshot_type_preference == 'auto' ? 'checked' : ''%>> Automatically generate screenshot<br>
		<% if !@style.nil? %>
			<div style="margin-left: 2em">
				<% if !@style.auto_after_screenshot_path.nil? %>
					<a href="<%=@style.auto_after_screenshot_path%>" rel="lightbox[screenshot] nofollow" title="Automatic primary screenshot"><img src="<%=@style.auto_after_screenshot_thumbnail_path%>"></a><br>
					(Last generated <%=@style.auto_screenshot_date%>.<%if !@style.auto_screenshot_last_failure_date.nil?%> Last attempt to generate failed on <%=@style.auto_screenshot_last_failure_date%>. See <a href="/help/coding#screenshots-doc">screenshot documentation</a> for info.<%end%>)
				<% elsif @style.auto_screenshots_same%>
					<strong>(No changes found after style was applied. Last check was on <%=@style.auto_screenshot_date%>. <%if !@style.auto_screenshot_last_failure_date.nil?%> Last attempt to generate screenshots failed on <%=@style.auto_screenshot_last_failure_date%>.<%end%> See <a href="/help/coding#screenshots-doc">screenshot documentation</a> for info.)</strong>
				<% elsif !@style.id.nil? %>
					(Automatic screenshot not yet taken.<%if !@style.auto_screenshot_last_failure_date.nil?%> Last attempt to generate failed on <%=@style.auto_screenshot_last_failure_date%>. See <a href="/help/coding#screenshots-doc">screenshot documentation</a> for info.<%end%>)
				<% end %>
			</div>
		<% end %>
		<input id="provide-screenshot" name="style[screenshot_type_preference]" type="radio" value="manual"  <%=@style.screenshot_type_preference == 'manual' ? 'checked' : ''%>> Use this screenshot (GIF, PNG, or JPG, &lt; 200KB):
		<div style="margin-left: 2em">
			<% if @style != nil and @style.after_screenshot_name != nil %>
				<a href="<%=@style.provided_after_screenshot_path%>" rel="lightbox[screenshot] nofollow" title="Provided primary screenshot"">
					<img src="<%=@style.provided_after_screenshot_thumbnail_path%>">
				</a><br>
				<input name="remove_after_screenshot" type="checkbox"> Remove<br>
				Change: <input name="style[after_screenshot]" type="file" accept="image/gif,image/png,image/jpeg" onchange="document.getElementById('provide-screenshot').checked = true">
			<% else %>
				<input name="style[after_screenshot]" type="file" accept="image/gif,image/png,image/jpeg" onchange="document.getElementById('provide-screenshot').checked = true">
			<% end %>
		</div>
		<input name="style[screenshot_type_preference]" type="radio" value="none" <%=@style.screenshot_type_preference == 'none' ? 'checked' : ''%>> No screenshots
	</div>

	<div class="form-controls">
		<label>Additional Screenshots (Optional)</label> <span class="linking-note">Other screenshots to demonstrate what your style does.</span>
		<table>
			<thead>
				<tr>
					<th>Description</th>
					<th>Upload</th>
					<th>Remove</th>
					<th>Current Image</th>
				</tr>
			</thead>
			<tbody>
				<% @style.screenshots.each do |screenshot| %>
					<tr>
						<td><input name="screenshot_description_<%=screenshot.id%>" size="25" maxlength="50" value="<%=screenshot.description%>"></td>
						<td><input name="screenshot_<%=screenshot.id%>" type="file" accept="image/gif,image/png,image/jpeg"></td>
						<td style="text-align:center"><input id="remove_screenshot_<%=screenshot.id%>" name="remove_screenshot_<%=screenshot.id%>" type="checkbox"></td>
						</td>
						<td style="text-align:center"><%=image_tag "style_screenshots/#{screenshot.path}?r=#{Time.now.to_i}", host: SCREENSHOT_DOMAIN%></td>
					</tr>
				<% end %>
				<% (1..(5 - @style.screenshots.size)).each do |i| %>
					<tr>
						<td><input name="new_screenshot_description_<%=i%>" size="25" maxlength="50" value="<%= params['new_screenshot_description_' + i.to_s]%>"></td>
						<td><input name="new_screenshot_<%=i%>" type="file" accept="image/gif,image/png,image/jpeg"></td>
					</tr>
				<% end %>
			</tbody>
		</table>
	</div>

	<div class="form-controls">
		<label for="style_pledgie_id"><a href="https://pledgie.com/">Pledgie</a> Campaign ID (Optional)</label><br>
		<%=s.text_field(:pledgie_id, :maxlength => 7)%>
	</div>

	<div class="form-controls">
		<label for="license">License</label>
		<div>By posting styles to userstyles.org, you are at minimum allowing people to use your styles for personal use. You may be more specific in what you allow by choosing a license. This setting defines the license for this style; you may also define a default license for all your styles on <%=link_to('your user page', :controller => :users, :action => :edit, :id => @style.user_id)%>. You can use the <a href="http://creativecommons.org/choose/">Creative Commons License Chooser</a> to help you pick a Creative Commons license. Be sure you understand the licenses before you choose them as they may not be revokable.</div>
		<input id="license-none" name="style[license]" type="radio" value="" <% if @style.license.nil?%>checked<%end%>> Use my default (currently <% case @style.user.license
			when nil %>
				not set)
			<% when 'publicdomain' %>
				CC0 - Public Domain)
			<% when 'ccby' %>
				CC BY - Creative Commons Attribution)
			<% when 'ccbysa' %>
				CC BY-SA - Creative Commons Attribution-ShareAlike)
			<% when 'ccbynd' %>
				CC BY-ND - Creative Commons Attribution-NoDerivs)
			<% when 'ccbync' %>
				CC BY-NC - Creative Commons Attribution-NonCommercial)
			<% when 'ccbyncsa' %>
				CC BY-NC-SA - Creative Commons Attribution-NonCommercial-ShareAlike)
			<% when 'ccbyncnd' %>
				CC BY-NC-ND - Creative Commons Attribution-NonCommercial-NoDerivs)
			<% when 'arr' %>
				No Redistribution)
		<% end %><br>
		<input id="license-cc0" name="style[license]" type="radio" value="publicdomain" <% if @style.license == 'publicdomain'%>checked<%end%>> <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0 - Public Domain</a><br>
		<input id="license-ccby" name="style[license]" type="radio" value="ccby" <% if @style.license == 'ccby'%>checked<%end%>> <a href="http://creativecommons.org/licenses/by/4.0/">CC BY - Creative Commons Attribution</a><br>
		<input id="license-ccbysa" name="style[license]" type="radio" value="ccbysa" <% if @style.license == 'ccbysa'%>checked<%end%>> <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA - Creative Commons Attribution-ShareAlike</a><br>
		<input id="license-ccbynd" name="style[license]" type="radio" value="ccbynd" <% if @style.license == 'ccbynd'%>checked<%end%>> <a href="http://creativecommons.org/licenses/by-nd/4.0/">CC BY-ND - Creative Commons Attribution-NoDerivs</a><br>
		<input id="license-ccbync" name="style[license]" type="radio" value="ccbync" <% if @style.license == 'ccbync'%>checked<%end%>> <a href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC - Creative Commons Attribution-NonCommercial</a><br>
		<input id="license-ccbyncsa" name="style[license]" type="radio" value="ccbyncsa" <% if @style.license == 'ccbyncsa'%>checked<%end%>> <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA - Creative Commons Attribution-NonCommercial-ShareAlike</a><br>
		<input id="license-ccbyncnd" name="style[license]" type="radio" value="ccbyncnd" <% if @style.license == 'ccbyncnd'%>checked<%end%>> <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND - Creative Commons Attribution-NonCommercial-NoDerivs</a><br>
		<input id="license-arr" name="style[license]" type="radio" value="arr" <% if @style.license == 'arr'%>checked<%end%>> No Redistribution
	</div>

	<%=s.hidden_field(:id)%>
	<%= submit_tag "Save"%>
<% end %>
